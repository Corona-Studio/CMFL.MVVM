using System;using System.Linq;using System.Net;using System.Text;using AwesomeSockets.Domain.Sockets;using AwesomeSockets.Sockets;using CMFL.MVVM.Class.Helper.Launcher;using Buffer = AwesomeSockets.Buffers.Buffer;namespace CMFL.MVVM.Class.Helper.Web{    /// <summary>    ///     Socket连接    /// </summary>    public class SocketHelper    {        private readonly Buffer _inBuffer = Buffer.New(1024 * 1024);        private readonly object _locker = new object();        /// <summary>        ///     Socket服务端地址        /// </summary>        public string Host { get; set; }        /// <summary>        ///     服务器端口        /// </summary>        public int Port { get; set; }        /// <summary>        ///     IP地址        /// </summary>        private IPAddress IpAddress { get; set; }        /// <summary>        ///     Socket        /// </summary>        private ISocket Socket { get; set; }        /// <summary>        ///     建立连接        /// </summary>        public void Connect()        {            try            {                if (Host == null) return;                var hostEntry = Dns.GetHostEntry(Host);                IpAddress = IPAddress.Parse(hostEntry.AddressList.First().ToString());                Socket = AweSock.TcpConnect(IpAddress.ToString(), Port);            }            catch (Exception)            {            }            //ClientSocket.BeginConnect(IpEndPoint, ConnectCallback, ClientSocket);        }        /// <summary>        ///     发送信息        /// </summary>        /// <param name="stringData"></param>        public string Send(string stringData)        {            lock (_locker)            {                try                {                    var byteData = Encoding.UTF8.GetBytes(stringData);                    var outBuffer = Buffer.New(byteData.Length);                    Buffer.Add(outBuffer, byteData);                    Buffer.FinalizeBuffer(outBuffer);                    var bytesSent = AweSock.SendMessage(Socket, outBuffer);                    LogHelper.WriteLogLine($"{bytesSent} bytes sent to the server.", LogHelper.LogLevels.Info);                    var (bytesReceived, endPoint) =                        AweSock.ReceiveMessage(Socket, _inBuffer);                    LogHelper.WriteLogLine($"{bytesReceived} bytes received from the server from {endPoint}.",                        LogHelper.LogLevels.Info);                    Buffer.FinalizeBuffer(_inBuffer);                    var content = Buffer.GetBuffer(_inBuffer);                    var result = Encoding.UTF8.GetString(content).TrimEnd('\0');                    return result;                }                catch (Exception ex)                {                    LogHelper.WriteLogLine(LanguageHelper.GetField("SocketSendDataFailed"), LogHelper.LogLevels.Error);                    LogHelper.WriteError(ex);                    return null;                }                finally                {                    Buffer.ClearBuffer(_inBuffer);                }            }        }        /// <summary>        ///     释放        /// </summary>        public void Dispose()        {            try            {                AweSock.CloseSock(Socket, 2000);            }            catch (Exception ex)            {                LogHelper.WriteLogLine($"{LanguageHelper.GetField("SocketDisposeFailed")}, {ex.Message}",                    LogHelper.LogLevels.Error);                LogHelper.WriteError(ex);            }        }    }}