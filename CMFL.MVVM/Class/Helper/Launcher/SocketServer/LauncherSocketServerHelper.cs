using System;using System.Net.Sockets;using System.Security.Cryptography;using System.Text;using System.Windows.Threading;using CMFL.MVVM.Class.Helper.Launcher.Settings;using CMFL.MVVM.Class.Helper.Other;using CMFL.MVVM.Class.Helper.Web;using CMFL.MVVM.Models.DataModel.Launcher;using CMFL.MVVM.ViewModels;using ProjCrypto.Class.Helper;using XC.RSAUtil;namespace CMFL.MVVM.Class.Helper.Launcher.SocketServer{    public static class LauncherSocketServerHelper    {        private const string RsaPublicKey =            "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCGeJHrlvhI5BosY6+19WWsixUD2sNBolXYAYvoaw8Wfk9zGKTqDJ2Qcj+LA0cKfSZtDXaM4VXH6cDwiZd8609qTwRVZMX7s37Xh3xCqZrJE5Wk6P/TQ3s+j96S2dJkFL+rKfJDuHRI3UzZ/qgo9zN4sXJqkSRN3f85JSfxuy8ghwIDAQAB";        private static readonly RsaPkcs1Util RsaPkcs1Util = new RsaPkcs1Util(Encoding.UTF8, RsaPublicKey);        private static readonly SocketHelper SocketHelper = new SocketHelper        {            Host = SettingsHelper.Settings.LauncherSocketServer,            Port = 6666        };        private static readonly DispatcherTimer PulseTimer = new DispatcherTimer(DispatcherPriority.Background)        {            Interval = TimeSpan.FromSeconds(5)        };        static LauncherSocketServerHelper()        {            PulseTimer.Tick += (sender, args) =>            {                var result = Send("PULSE");                var delay = long.TryParse(result, out var time)                    ? (TimeHelper.GetTimeStamp() - time).ToString()                    : null;                if (!string.IsNullOrEmpty(delay))                {                    SettingsHelper.Settings.IsConnectedToCMF = true;                    LogHelper.WriteLogLine($"{LanguageHelper.GetField("ConnectedToServer")}{delay} ms",                        LogHelper.LogLevels.Info);                }                else                {                    PulseTimer.IsEnabled = false;                    SettingsHelper.Settings.IsConnectedToCMF = false;                    CurrentDispatcher.Invoke(() =>                    {                        ViewModelLocator.MainWindowViewModel.ChangeLoginPanelState(false);                    });                    LogHelper.WriteLogLine(LanguageHelper.GetField("FailedConnectToServer"), LogHelper.LogLevels.Error);                }            };            Connect();        }        private static Dispatcher CurrentDispatcher { get; } = Dispatcher.CurrentDispatcher;        public static void CloseSocket()        {            SocketHelper.Dispose();        }        public static string Send(string command, string[] arguments = null)        {            var encryptedText = RsaEncrypt.EncryptString(new SocketCommandModel(command, arguments).ToJsonString(),                RsaPkcs1Util.PublicRsa.KeySize, RsaPkcs1Util.PublicRsa.ToXmlString(false),                RSAEncryptionPadding.OaepSHA1);            var result = SocketHelper.Send(encryptedText);            if (string.IsNullOrEmpty(result))                return null;            try            {                var bytes = Convert.FromBase64String(result);                var decrypted = RsaEncrypt.Decrypt(bytes,                    RsaKeyConvert.PublicKeyPemToXml(                        $"-----BEGIN PUBLIC KEY-----\n{RsaPublicKey}\n-----END PUBLIC KEY-----"), 1024);                return decrypted;            }            catch (FormatException)            {                return null;            }        }        private static void SendPulse()        {            PulseTimer.IsEnabled = true;            new System.Threading.Thread(() => { PulseTimer.Start(); }) {IsBackground = true}.Start();        }        public static void Connect()        {            try            {                LogHelper.WriteLogLine(LanguageHelper.GetField("ConnectingToServer"), LogHelper.LogLevels.Info);                SocketHelper.Connect();                var timestamp = Send("PULSE");                var delay = long.TryParse(timestamp, out var time)                    ? (TimeHelper.GetTimeStamp() - time).ToString()                    : null;                if (!string.IsNullOrEmpty(delay))                {                    LogHelper.WriteLogLine($"{LanguageHelper.GetField("ConnectedToServer")}{delay} ms",                        LogHelper.LogLevels.Info);                    SendPulse();                }                else                {                    ViewModelLocator.MainWindowViewModel.ChangeLoginPanelState(false);                    LogHelper.WriteLogLine(LanguageHelper.GetField("FailedConnectToServer"), LogHelper.LogLevels.Error);                    return;                }                ViewModelLocator.MainWindowViewModel.ChangeLoginPanelState(true);            }            catch (SocketException e)            {                ViewModelLocator.MainWindowViewModel.ChangeLoginPanelState(false);                LogHelper.WriteLogLine(LanguageHelper.GetField("FailedConnectToServer"), LogHelper.LogLevels.Error);                LogHelper.WriteError(e);            }            catch (ObjectDisposedException e)            {                ViewModelLocator.MainWindowViewModel.ChangeLoginPanelState(false);                LogHelper.WriteLogLine(LanguageHelper.GetField("FailedConnectToServerDisposed"),                    LogHelper.LogLevels.Error);                LogHelper.WriteError(e);            }        }    }}